#ifndef ADDER_8_HPP
#define ADDER_8_HPP

#include "../full_adder/FULL_ADDER.hpp"
#include <vector>

class ADDER_8: public COMPONENT{

private:

  //array of output addreses for update purpose


  void add_output(BUFFER &B0);

public:

  std::vector<BUFFER*> output_list;

  //inputs
  I_BUFFER INPUT_BUFFER_A0;
  I_BUFFER INPUT_BUFFER_A1;
  I_BUFFER INPUT_BUFFER_A2;
  I_BUFFER INPUT_BUFFER_A3;
  I_BUFFER INPUT_BUFFER_A4;
  I_BUFFER INPUT_BUFFER_A5;
  I_BUFFER INPUT_BUFFER_A6;
  I_BUFFER INPUT_BUFFER_A7;

  I_BUFFER INPUT_BUFFER_B0;
  I_BUFFER INPUT_BUFFER_B1;
  I_BUFFER INPUT_BUFFER_B2;
  I_BUFFER INPUT_BUFFER_B3;
  I_BUFFER INPUT_BUFFER_B4;
  I_BUFFER INPUT_BUFFER_B5;
  I_BUFFER INPUT_BUFFER_B6;
  I_BUFFER INPUT_BUFFER_B7;

  I_BUFFER INPUT_BUFFER_CARRY_IN;


  //outputs
  BUFFER OUTPUT_BUFFER_SUM_0;
  BUFFER OUTPUT_BUFFER_SUM_1;
  BUFFER OUTPUT_BUFFER_SUM_2;
  BUFFER OUTPUT_BUFFER_SUM_3;
  BUFFER OUTPUT_BUFFER_SUM_4;
  BUFFER OUTPUT_BUFFER_SUM_5;
  BUFFER OUTPUT_BUFFER_SUM_6;
  BUFFER OUTPUT_BUFFER_SUM_7;

  BUFFER OUTPUT_BUFFER_CARRY;


  //internal logic
  FULL_ADDER FULL_ADDER_1;
  FULL_ADDER FULL_ADDER_2;
  FULL_ADDER FULL_ADDER_3;
  FULL_ADDER FULL_ADDER_4;
  FULL_ADDER FULL_ADDER_5;
  FULL_ADDER FULL_ADDER_6;
  FULL_ADDER FULL_ADDER_7;
  FULL_ADDER FULL_ADDER_8;


  //update function
  void update_output(std::queue<COMPONENT*> &external_update_queue);

  //constructor
  ADDER_8();

};






#endif
